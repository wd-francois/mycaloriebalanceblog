---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import { formatDate } from '@utils/date';
import SeriesBadge from './SeriesBadge.astro';

interface Props {
  currentPost: any;
  limit?: number;
}

const { currentPost, limit = 3 } = Astro.props;
const allPosts = await getCollection('posts');

// Filter out the current post
const otherPosts = allPosts.filter(post => post.slug !== currentPost.slug);

// Define post type
type Post = {
  id?: string;
  slug: string;
  data: {
    title: string;
    description?: string;
    date?: Date;
    image?: any;
    tags?: string[];
    categories?: string[];
    authors?: string[];
    series?: [string, string]; // [seriesName, position]
    canonical?: string;
  };
};

// Function to get related posts
function getRelatedPosts(currentPost: Post, otherPosts: Post[], limit: number): Post[] {
  // Get posts with matching tags
  const postsByTags = otherPosts.filter(post => {
    const postTags = post.data.tags || [];
    const currentTags = currentPost.data.tags || [];
    return currentTags.some((tag: string) => postTags.includes(tag));
  });

  // If we have enough posts with matching tags, return them
  if (postsByTags.length >= limit) {
    // Shuffle the array to get random posts with matching tags
    return shuffleArray(postsByTags).slice(0, limit);
  }

  // If we don't have enough posts with matching tags, get posts with matching categories
  const postsByCategories = otherPosts.filter(post => {
    const postCategories = post.data.categories || [];
    const currentCategories = currentPost.data.categories || [];
    return currentCategories.some((category: string) => postCategories.includes(category));
  });

  // Combine unique posts from tags and categories
  const combinedPosts = [...postsByTags];
  
  // Add posts from categories that aren't already included
  postsByCategories.forEach(post => {
    if (!combinedPosts.some(p => p.slug === post.slug)) {
      combinedPosts.push(post);
    }
  });

  // If we have enough combined posts, return them
  if (combinedPosts.length >= limit) {
    return shuffleArray(combinedPosts).slice(0, limit);
  }

  // If we still don't have enough posts, add random posts
  const remainingPosts = otherPosts.filter(post => 
    !combinedPosts.some((p: Post) => p.slug === post.slug)
  );
  
  const result = [...combinedPosts, ...shuffleArray(remainingPosts)];
  return result.slice(0, limit);
}

// Helper function to shuffle an array
function shuffleArray<T>(array: T[]): T[] {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

const relatedPosts = getRelatedPosts(currentPost, otherPosts, limit);
---

<section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
  <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Related Posts</h2>
  
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    {relatedPosts.map((post) => {
      // Extract the slug from the canonical URL or use the file name
      const slug = post.data.canonical 
        ? new URL(post.data.canonical).pathname.split('/').filter(Boolean).pop()
        : post.slug;
      
      // Check if post is part of a series
      const isPartOfSeries = post.data.series && Array.isArray(post.data.series) && post.data.series.length === 2;
      
      return (
        <article class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transition-transform duration-400 hover:transform hover:scale-[1.02]">
          {/* Post Image */}
          {post.data.image && (
            <a href={`/${post.slug}/`} class="block overflow-hidden aspect-video">
              <Image 
                src={post.data.image} 
                alt={post.data.title} 
                class="w-full h-full object-cover transition-transform duration-400 hover:scale-105"
                width={400}
                height={225}
              />
            </a>
          )}
          
          <div class="p-5">
            <div class="flex flex-wrap gap-2 mb-2 items-center justify-between">
              {/* Categories */}
              {post.data.categories && post.data.categories.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {post.data.categories.map((category: string) => (
                    <a 
                      href={`/categories/${category.toLowerCase()}/`} 
                      class="text-xs font-medium px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors"
                    >
                      {category}
                    </a>
                  ))}
                </div>
              )}
              
              {/* Series Badge (if part of a series) */}
              {isPartOfSeries && post.data.series && (
                <SeriesBadge 
                  seriesName={post.data.series[0]} 
                  seriesPosition={post.data.series[1]}
                  size="sm"
                />
              )}
            </div>
            
            {/* Title */}
            <h3 class="text-xl font-bold mb-2 text-gray-900 dark:text-white line-clamp-2" >
              <a href={`/${post.slug}/`} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                {post.data.title}
              </a>
            </h3>
            
            {/* Description */}
            {post.data.description && (
              <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                {post.data.description}
              </p>
            )}
            
            <div class="flex items-center justify-between mt-4 text-sm text-gray-500 dark:text-gray-400">
              {/* Author */}
              {post.data.authors && post.data.authors.length > 0 && (
                <div class="flex items-center">
                  <Icon name="mdi:account" class="w-4 h-4 mr-1" />
                  <span>{post.data.authors[0]}</span>
                </div>
              )}
              
              {/* Date */}
              {post.data.date && (
                <div class="flex items-center">
                  <Icon name="mdi:calendar" class="w-4 h-4 mr-1" />
                  <time datetime={post.data.date.toISOString()}>
                    {formatDate(post.data.date)}
                  </time>
                </div>
              )}
            </div>
          </div>
        </article>
      );
    })}
  </div>
</section>
