---
import ThemeToggle from "./ThemeToggle.astro";
import { Image } from "astro:assets";
import menu from "@config/menu.json";
import { siteConfig } from "@config/site"; // Import siteConfig
import logoSVG from "@assets/favicons/mycaloriebalance_blue.svg";

// Extract main menu items
const mainMenu = menu.main;
---

<header class="sticky top-0 z-50 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 shadow-sm w-full relative">
  <div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 w-full">
    <div class="flex justify-between items-center h-14 sm:h-16">
      <!-- Mobile menu button -->
      <div class="flex md:hidden">
        <button 
          type="button" 
          id="mobile-menu-button"
          class="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white p-2 rounded-md min-h-[44px] min-w-[44px] flex items-center justify-center"
          aria-controls="mobile-menu" 
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Icon when menu is closed -->
          <svg 
            id="menu-closed-icon"
            class="block h-6 w-6" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor" 
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <!-- Icon when menu is open -->
          <svg 
            id="menu-open-icon"
            class="hidden h-6 w-6" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor" 
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Logo -->
      <div class="flex-shrink-0 flex items-center">
        <a href="/" class="flex items-center group">
          <Image 
            src={logoSVG} 
            alt={siteConfig.title + ' Logo'} 
            width={90} 
            height={82}
            class="mr-1 sm:mr-2 transition-all duration-300 group-hover:scale-105 dark:drop-shadow-[0_0_8px_rgba(59,130,246,0.3)] sm:w-[110px] sm:h-[100px]"
          />
        </a>
      </div>

      <!-- Desktop menu -->
      <nav class="hidden md:flex space-x-2 lg:space-x-4 items-center">
        {
          mainMenu.map((item) => (
            <a
              href={item.url}
              class="text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 px-2 lg:px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 whitespace-nowrap"
            >
              {item.name}
            </a>
          ))
        }
        <!-- Search Icon -->
        <a href="/search/" class="text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 p-2 rounded-md transition-colors duration-200" aria-label="Search">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </a>
        <ThemeToggle id="themeToggle-desktop" />
      </nav>
    </div>
  </div>

  <!-- Mobile menu, show/hide based on menu state -->
  <div class="hidden md:hidden absolute left-0 right-0 top-full z-50" id="mobile-menu">
    <div class="px-3 pt-2 pb-3 space-y-1 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 shadow-lg">
      {
        mainMenu.map((item) => (
          <a
            href={item.url}
            class="block px-3 py-3 rounded-md text-base font-medium text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200 min-h-[44px] flex items-center"
          >
            {item.name}
          </a>
        ))
      }
      <div class="px-3 py-3 flex justify-center gap-4 border-t border-gray-200 dark:border-gray-700 mt-2">
        <!-- Search Icon (Mobile) -->
        <a href="/search/" class="text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 p-2 rounded-md transition-colors duration-200 min-h-[44px] min-w-[44px] flex items-center justify-center" aria-label="Search">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </a>
        <ThemeToggle id="themeToggle-mobile" />
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuClosedIcon = document.getElementById('menu-closed-icon');
  const menuOpenIcon = document.getElementById('menu-open-icon');

  if (mobileMenuButton && mobileMenu && menuClosedIcon && menuOpenIcon) {
    mobileMenuButton.addEventListener('click', () => {
const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
mobileMenuButton.setAttribute('aria-expanded', (!expanded).toString());
mobileMenu.classList.toggle('hidden');
menuClosedIcon.classList.toggle('hidden');
menuOpenIcon.classList.toggle('hidden');
    });
  }

  // Mobile dropdowns
  const mobileDropdownButtons = document.querySelectorAll('.mobile-dropdown-button');
  
  mobileDropdownButtons.forEach(button => {
    button.addEventListener('click', () => {
      const content = button.nextElementSibling;
      const icon = button.querySelector('.mobile-dropdown-icon');
      
      if (content) {
        content.classList.toggle('hidden');
      }
      if (icon) {
        icon.classList.toggle('rotate-180');
      }
    });
  });

  // Desktop dropdowns
  document.addEventListener('DOMContentLoaded', () => {
    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
    
    // Function to close all dropdowns
    const closeAllDropdowns = () => {
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.add('hidden');
        menu.classList.remove('opacity-100');
        menu.classList.add('opacity-0');
      });
      document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
        toggle.setAttribute('aria-expanded', 'false');
        const icon = toggle.querySelector('.dropdown-icon');
        if (icon) {
          icon.classList.remove('rotate-180');
        }
      });
    };

    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      if (e.target instanceof Element && !e.target.closest('.dropdown')) {
        closeAllDropdowns();
      }
    });

    // Handle dropdown toggle clicks
    dropdownToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        e.stopPropagation();
        const dropdown = toggle.closest('.dropdown');
        if (!dropdown) return;
        
        const menu = dropdown.querySelector('.dropdown-menu');
        const icon = toggle.querySelector('.dropdown-icon');
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';

        // Close all other dropdowns
        document.querySelectorAll('.dropdown-toggle').forEach(otherToggle => {
          if (otherToggle !== toggle) {
            otherToggle.setAttribute('aria-expanded', 'false');
            const otherIcon = otherToggle.querySelector('.dropdown-icon');
            if (otherIcon) {
              otherIcon.classList.remove('rotate-180');
            }
            const otherDropdown = otherToggle.closest('.dropdown');
            if (otherDropdown) {
              const otherMenu = otherDropdown.querySelector('.dropdown-menu');
              if (otherMenu) {
                otherMenu.classList.add('hidden');
                otherMenu.classList.remove('opacity-100');
                otherMenu.classList.add('opacity-0');
              }
            }
          }
        });

        // Toggle current dropdown
        if (isExpanded) {
          toggle.setAttribute('aria-expanded', 'false');
          if (menu) {
            menu.classList.add('hidden');
            menu.classList.remove('opacity-100');
            menu.classList.add('opacity-0');
          }
          if (icon) {
            icon.classList.remove('rotate-180');
          }
        } else {
          toggle.setAttribute('aria-expanded', 'true');
          if (menu) {
            menu.classList.remove('hidden');
            // Small delay to allow the display change to take effect before animating opacity
            setTimeout(() => {
              if (menu) {
                menu.classList.remove('opacity-0');
                menu.classList.add('opacity-100');
              }
            }, 10);
          }
          if (icon) {
            icon.classList.add('rotate-180');
          }
        }
      });

      // Handle keyboard navigation
      toggle.addEventListener('keydown', (e) => {
        if ((e instanceof KeyboardEvent) && (e.key === 'Enter' || e.key === ' ')) {
          e.preventDefault();
          (toggle as HTMLElement).click();
        } else if ((e instanceof KeyboardEvent) && e.key === 'Escape') {
          closeAllDropdowns();
        }
      });
    });
  });
</script>
