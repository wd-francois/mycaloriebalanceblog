---
import { Icon } from 'astro-icon/components';

export interface Props {
	// New prop names
	text?: string;
	link?: string;
	// Legacy prop names (for backward compatibility)
	label?: string;
	url?: string;
	variant?: 'solid' | 'outline';
	color?: 'blue' | 'green' | 'red' | 'purple' | 'gray';
	size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
	external?: boolean;
	// Icon support
	icon?: string;
	iconPosition?: 'left' | 'right';
	iconOnly?: boolean;
	ariaLabel?: string;
}

const { 
	// Use new prop names with fallback to legacy props
	text, 
	link, 
	label, 
	url, 
	variant = 'solid', 
	color = 'blue',
	size = 'md',
	external = false,
	icon,
	iconPosition = 'left',
	iconOnly = false,
	ariaLabel
} = Astro.props;

// Use new props if available, otherwise fall back to legacy props
const buttonText = text || label || '';
const buttonLink = link || url || '#';

// Determine if we need to show accessible text for icon-only buttons
const hasIcon = !!icon;
const showIconOnly = iconOnly && hasIcon;
const accessibleLabel = ariaLabel || buttonText;

// Size classes mapping
const sizeClasses = {
	xs: 'text-xs px-2 py-1',
	sm: 'text-sm px-3 py-1.5',
	md: 'text-base px-4 py-2',
	lg: 'text-lg px-5 py-2.5',
	xl: 'text-xl px-6 py-3'
};

// Icon size mapping
const iconSizes = {
	xs: 'w-3 h-3',
	sm: 'w-4 h-4',
	md: 'w-5 h-5',
	lg: 'w-6 h-6',
	xl: 'w-7 h-7'
};

// Spacing between icon and text
const iconSpacing = {
	xs: 'mr-1',
	sm: 'mr-1.5',
	md: 'mr-2',
	lg: 'mr-2.5',
	xl: 'mr-3'
};

// For right-positioned icons, we need to flip the margin
const iconMargin = iconPosition === 'left' 
	? iconSpacing[size] 
	: `ml-${iconSpacing[size].split('-')[1]}`;

// For icon-only buttons, we need different padding
const iconOnlyPadding = {
	xs: 'p-1',
	sm: 'p-1.5',
	md: 'p-2',
	lg: 'p-2.5',
	xl: 'p-3'
};

const colorClasses = {
	blue: {
		solid: 'bg-blue-500 hover:bg-blue-600 text-white shadow-sm dark:bg-blue-600 dark:hover:bg-blue-700',
		outline: 'border-blue-500 text-blue-600 hover:bg-blue-50 dark:border-blue-500 dark:text-blue-400 dark:hover:bg-blue-900/20'
	},
	green: {
		solid: 'bg-green-500 hover:bg-green-600 text-white shadow-sm dark:bg-green-600 dark:hover:bg-green-700',
		outline: 'border-green-500 text-green-600 hover:bg-green-50 dark:border-green-500 dark:text-green-400 dark:hover:bg-green-900/20'
	},
	red: {
		solid: 'bg-red-500 hover:bg-red-600 text-white shadow-sm dark:bg-red-600 dark:hover:bg-red-700',
		outline: 'border-red-500 text-red-600 hover:bg-red-50 dark:border-red-500 dark:text-red-400 dark:hover:bg-red-900/20'
	},
	purple: {
		solid: 'bg-purple-500 hover:bg-purple-600 text-white shadow-sm dark:bg-purple-600 dark:hover:bg-purple-700',
		outline: 'border-purple-500 text-purple-600 hover:bg-purple-50 dark:border-purple-500 dark:text-purple-400 dark:hover:bg-purple-900/20'
	},
	gray: {
		solid: 'bg-gray-500 hover:bg-gray-600 text-white shadow-sm dark:bg-gray-600 dark:hover:bg-gray-700',
		outline: 'border-gray-500 text-gray-600 hover:bg-gray-50 dark:border-gray-500 dark:text-gray-400 dark:hover:bg-gray-900/20'
	}
};

// Construct the button classes based on all the options
const buttonClasses = `not-prose inline-flex items-center justify-center rounded-md font-medium transition-all duration-200 ease-in-out
	${variant === 'outline' ? 'border-2 ' : ''} 
	${colorClasses[color][variant]}
	${showIconOnly ? iconOnlyPadding[size] : sizeClasses[size]}
	${showIconOnly ? 'aspect-square' : ''}
`;
---

<a
	class={buttonClasses}
	href={buttonLink}
	{...external ? { target: "_blank", rel: "noopener noreferrer" } : {}}
	{...showIconOnly ? { "aria-label": accessibleLabel } : {}}
>
	{/* Icon on the left side */}
	{hasIcon && iconPosition === 'left' && (
		<span class={`inline-flex ${!showIconOnly ? iconMargin : ''}`}>
			<Icon name={`mdi:${icon}`} class={iconSizes[size]} aria-hidden="true" />
		</span>
	)}
	
	{/* Button text (hidden if icon-only) */}
	{!showIconOnly && buttonText}
	
	{/* Icon on the right side */}
	{hasIcon && iconPosition === 'right' && (
		<span class={`inline-flex ${!showIconOnly ? iconMargin : ''}`}>
			<Icon name={`mdi:${icon}`} class={iconSizes[size]} aria-hidden="true" />
		</span>
	)}
</a>
