---
import { getCollection } from 'astro:content';

export interface Props {
  currentSlug: string;
  seriesName: string;
  seriesPosition: string;
}

const { currentSlug, seriesName, seriesPosition } = Astro.props;

// Get all posts (including drafts for preview purposes)
const allPosts = await getCollection('posts');

// Filter posts that are part of the same series and sort them by position
const seriesPosts = allPosts
  .filter(post => {
    // Check if the post has series data and it matches our series name
    return post.data.series && 
           Array.isArray(post.data.series) && 
           post.data.series.length === 2 && 
           post.data.series[0] === seriesName;
  })
  .sort((a, b) => {
    // Sort by the series position (second element in the array)
    const posA = parseInt(a.data.series[1] || '0');
    const posB = parseInt(b.data.series[1] || '0');
    return posA - posB;
  });

// Get current post index in the series
const currentIndex = seriesPosts.findIndex(post => post.slug === currentSlug);

// Get previous and next posts in the series
const prevPost = currentIndex > 0 ? seriesPosts[currentIndex - 1] : null;
const nextPost = currentIndex < seriesPosts.length - 1 ? seriesPosts[currentIndex + 1] : null;
---

<div class="not-prose bg-gray-50 dark:bg-gray-800 rounded-lg p-5 my-8 shadow-sm">
  <div class="mb-4">
    <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-1">
      {seriesName}
    </h3>
    <p class="text-sm text-gray-600 dark:text-gray-300">
      Part {seriesPosition} of {seriesPosts.length || 1}
    </p>
  </div>
  
  <div class="space-y-3">
    {seriesPosts.map((post, index) => (
      <div class="flex items-center">
        <div class="flex-shrink-0 mr-3">
          <div class={`w-7 h-7 rounded-full flex items-center justify-center ${post.slug === currentSlug ? 'bg-blue-600 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'}`}>
            {index + 1}
          </div>
        </div>
        <div class="flex-grow">
          {post.slug === currentSlug ? (
            <span class="font-medium text-blue-600 dark:text-blue-400">
              {post.data.title}
            </span>
          ) : (
            <a 
              href={`/${post.slug}/`} 
              class="text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            >
              {post.data.title}
            </a>
          )}
        </div>
      </div>
    ))}
  </div>
  
  <div class="mt-5 pt-4 border-t border-gray-200 dark:border-gray-700 flex justify-between">
    {prevPost ? (
      <a href={`/${prevPost.slug}/`} class="flex items-center text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Previous: {prevPost.data.title}
      </a>
    ) : (
      <div></div>
    )}
    
    {nextPost ? (
      <a href={`/${nextPost.slug}/`} class="flex items-center text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors">
        Next: {nextPost.data.title}
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </a>
    ) : (
      <div></div>
    )}
  </div>
</div>
